

		Артем Русов, Леша Маршалл, Надежда Protestinginfo


		okiseleva.blogspot.com
	swapi.dev
	Тестирование API от Ольги Назиной
		leetcode.com
		hackerrank.com
		guru99.com
		testbase.ru
		testingchallenges.thetestingmap.org
		https://testbase.atlassian.net/wiki/spaces/USERS/overview
		w3schools.com
		https://mixpanel.com/trends/#report/android_vs_ios			- Android vs Ios
		https://gs.statcounter.com/vendor-market-share/mobile/worldwide
		https://www.appbrain.com/stats/top-android-phones-tablets-by-country?country=gl
		https://www.browserstack.com/test-on-the-right-mobile-devices
		https://developer.android.com/guide/topics/ui
		https://developer.apple.com/design/human-interface-guidelines/
		https://developer.android.com/studio
		https://developer.apple.com/xcode/
		https://www.genymotion.com
		teremokgames.com - генерация файла определенного размера
		git-scm.com 
		
		reqres.in - тест API
		
	Тестовые почтовые ящики - mailinator.com	
		
		
		Принципы тестирования ISTQB
	
	1. Тестирование показывает наличие дефектов, а не их отсутствие - если мы их не обнаружили - это не значит, что их нет
	
	2. Исчерпывающее тестирование невозможно - есть техники и приоритеты + спец техники тест дизайна (как с миним усилиями покрыть как можно больше кода)
	
	3. Раннее тестирование сохраняет время и деньги - чем раньше тест, тем дешевле и меньше багов (начиная с тестирования требований)
	
	4. Принцип кластеризации дефектов, Правило Парета - скопление дефектов - в небольшом кол-ве модулей очень много дефектов - 80% дефектов в 20% функций - тестер распределяет усилия пропорционально фактич плотности багов
	
	5. Парадокс пестицида - одни и те же тесты вновь и вновь находят меньше ошибок, поэтому надо вносить новые сценарии и правки для обнаружения новых багов
	
	6. Контекст - тестирование зависит от контекста - в медицине более тщательно, чем в играх, посещаемые сайты - держать нагрузочные тесты
	
	7. Заблуждение об отсутствии ошибок 

		Верификация - СТАТИЧ практика проверки документов дизайна, архитектуры, кода и тд. - без запуска кода
					- отвечает на вопрос "Делаем ли мы продукт правильным"
					- до валидации
					- проверяем наличие решения требований
		
		Валидация - процесс оценки конечного продукта - проверяем соответствует ли продукт ожиданиям и требованиям покупателя - запуск кода
				  - ДИНАМИЧ процесс
				  - после верификации
				  - проверяем работоспособность решения требований
				  
		Уровни
	
	1.1 Компонентное - тест корзины, оплаты итд
	1.2 Модульное - страница авторизации, поиск товара, добавление в корзину, оплата
	1.3 Unit testing - программист
	
	2. Интеграционное - проверка взаимодействия модулей 2х и более
		2.1 тест интеграции
		2.2 системное интеграционное тестирование - тест интерфейсов программирования приложений 
			2.2.1 API
			2.2.2 CLI (Интерфейс comand line - ввод текста с клавы)
			2.2.3 GUI

	3. Системное - полная проверка приложения

	4. Приемочное
		4.1 пользовательское - user accepting testing UAT
		4.2 эксплуатационное
		4.3 на соответствие контракту
		4.4 alpha
		4.5 beta
		
	5.1 Позитивное - ожидаемое поведение
	5.2 Негативное - неожиданное поведение приложения
	
			Интерфейс - способ взаимодействия программы
	
		1. UI - User interface (graphic)
		2. CLI - Command Line Interface - интерфейс командной строки
		3. API - Application Programming Interface - программный интерфейс приложения
	
		
		По степени важности тестируемых функций
	
	1. Smoke - на начальном этапе - например, после нового билда - быстрые, легкие тесты
	2. Critical path testing - тест критического пути - типичные задачи типичных юзеров, проверяем основную массу требований к продукту
	3. Extended test - расширенный тест - проверка нестандартного использования ПО, макс. загрузить, Негативные тесты


		По цели
		
	1. new feature test
	2. regression test - тест ранее проверенной функц-ти с целью убедиться, что добавление новой фичи или исправление бага НЕ повлияло на работу старой функц-ти
					   - м.б. проведено на любом уровне - smoke, critical path, extended
					   - после каждого билда (промежут. версии продукта)
					   - проверка исправленных багов
					   - проверка взаимосвязанных функциональностей
					   - несколько раз
					   - обычно автоматизируют
					   
		выбор тестов для регрессии 
		
			- безопасность, критические функции
			- часто меняющиеся области
			- тесты функций с высокой вероятностью ошибки
	
	3. re-test - проверка правильности исправления дефекта (defect validation)


		По степени автоматизации

	-	Ручное
	-	Автоматизированное - осн. обьекты - regress, smoke
	
	
		По знанию кода
	
	1. Black box - тестирование поведения
	2. White box
	3. Gray box - внутренняя реализация требований известна частично
	
	
	
	1. Функциональное - проверка соответствия функц. требований его реальным характеристикам 
	
	2. Нефункциональное - реакция системы на НЕпредвиденные ситуации
	
		1. тест на отказ и восстановление (восст-е после ошибок и сбоев)
		
		2. производ-ти - 
			- нагрузочное (норм. нагруз)
			- стресс (экстрим. нагруз)
			- стабильности (при длит. работе)
			- объемное (увелич. обьемы обрабат. данных)
		
		3. Usability 
		4. Безопасности - доступ к данным, к системе
		5. Установки - настройки, обновления, удаления
		6. Конфигурационное - 
			- кроссплатформ (android, ios)
			- кроссбраузерное (chrome, mozilla, opera)
		
		7. Локализации (l10n) - адаптация к языку, обозначениям валют, даты и времени, цветов и символов
		8. Интернационализации (i18n) - закладка кодировки, чтения текста вертикально или справа налево
		9. GUI - сравнение с макетом
		10. Accessability (доступности) - людям с ограниченными возможностями, когда за рулем или держит ребенка (не всегда проблемы со здоровьем)


		По исполнению сценария 
			
	- ad hock - без спецификаций, плана, кейсов, импровизация
	- исследовательское - более формальная версия, не требует кейсов, каждый последующий тест выбирается на основании результата предыдущего теста
	- сценарное - по кейсам
	
	
		По запуску кода
		
	- Статическое - тест документации, функц спеки и требований, вычитка кода
	- Динамическое - запуск кода
	
					   
		Модели разработки 
	
	1. Waterfall - изменение требований НЕ предусмотрено, гос.учреждения, банки или миграция проекта на др. платформу (меняется только окружение)
	
		- требования, анализ, дизайн, кодинг, тестинг, релиз
		- в случае изменения требований - начало заново
		- увел. затрат при изменении требований
		
	2. V model - в проектах, где временные и фин. ограничения
	
		- нет гибкости
		- код пишем только на середине процесса
		- нет динамич. внесения изменений
	
	3. PDCA plan do check act - Agile - Iterative/Incremental - рано создаем ПО, гибкость - готовы к динамич. изменениям, 2-4 нед итерация, НО
	
		не всегда известны все требования к началу планирования
	
		Plan - requirements
		Do - analysis, coding
		Check - testing
		Act - review reuirements, release
	
						************************************************************************************
	
	Agile - набор методов и принципов гибким управлением проектами
	
			Agile   - люди и коннект важнее процессов и инструментов
				- работающий продукт важнее исчерпывающей документации
				- работа с заказчиком важнее согласования условий контракта
				- готовность к изменениям важнее первоначального плана
				
		Scrum   1. Команда
		
					1. owner - управление бэклогом - фичи, требования, уточнения, приоритезация
					
					2. dev team 3-9
						- самоорганизация
						- кросс-функциональность
						- коллективная ответственность
						
					3. scrum master
				
				2. События
					- Спринт - plan, daily, review/refinement, retro, demo, All hands - что прошло норм, какие были проблемы, что улучшить
				
				3. Артефакты
					- беклог продукта, бэклог спринта, уточнения бэклога, критерии готовности (definition of ready), user stories, definition of done (менее 10% критич.багов и т.д.), покер план(m,s,l,xl) 
				
				4. Метрики
					- скорость(в сторях), емкость(в часах), rate сгорания задач, накопит. диаграмма потока
	
							***********************************************
							
		Требования
		
	1. Бизнес - какая польза, как получим прибыль
	
	2. Пользовательские - задачи юзера, кот. он сможет выполнять
	
	3. Продуктные - функциональные (что система должна делать) и НЕфункц. (как система должна делать)
	
		Пути выявления
		
	1. Интервью с заказчиком и юзерами
	2. Наблюдение за юзерами
	3. Самостоят. описание - здравый смысл
	4. Прототипирование - на основе конкурентов
	
		Свойства
		
	1. завершенность
	2. непротиворечивость
	3. корректность
	4. недвусмысленность
	5. проверяемость
	6. модифицируемость
	7. прослеживаемость
	
								***************************************

		Check list - bild, environment, date, tester, тип теста, название теста, результат

		Test case - заголовок, шаги, окружение, приоритет, expected result, 

		Test suite
		
		Bug report - title, STR, Actual result, Expected result, severity (Tester - highest, high, medium, low), priority(PM),
						environment, attachments, bild, author, assignee
	
	*****	*****
			
			20 Тест стратегия - более высокоуровневая, чем Тест-план

		- цель, виды, критерии начала и конца тестирования, инфо о продукте
		
			Тест план
			
		- 	Приоритет, окружение, задачи, доки, техники тест дизайна, баг трекинг, инструменты
		
			Отчет о тестировании
			
		- Промежуточный - дневной, недельный, месячный, версионный (по итерации)
		- Финальный
		
	*******
	
			Части отчета
			
		- состав команды, сроки, процессы, процент пройденных кейсов, критичные баги, результаты регресса
	
	*******
	
			21 Клиент-сервер - 2х уровневая и 3х-уровневая (с БД)
			
		- тонкий - браузер, осн. операции на сервере
		- толстый - 1С бухгалтер, онлайн игры - все основное, вычислит. операции на клиенте
		
	*******	
		
			22 Протокол - набор правил передачи информации
			
		Application - http, fttp, dhcp, ping
		
		Transport - tcp, udp (у tcp есть гарантия повторной отправки данных если байты не дошли)
		
		Network - ip
		
		Network interface - ethernet
		
		Осн.часть (payload) полезная нагрузка
		Header - заголовок - описыывает как payload должен передаваться
		
			http request:
		
		1. method - get
		2. protocol version - http/1.1
		3. path - host: mail.ru
		4. headers - необязат. часть
		
			http response:
			
		1. protocol version - http/1.1
		2. status code - 200
		3. status message - OK
		4. headers
		
		
		GET, post, put/patch, delete
		
		301 redirect - потенц. угроза, у нас не всегда может быть инфо о новом адресе ресурса, может пропасть - 404
		
	*******	
		
			23 URL
			
	URI = URL (http://mail.ru) + URN (/catalog/index.html)
		
			25 HTML
			
	Hyper Text Markup Language, XML - Extended Markup Language, CSS - Cascading Styles Sheets
		
			26 Веб формы
			
	Валидация на клиенте - до момента отправки запроса на сервер, на сервере
		
			27 SOAP REST - Веб сервисы, веб службы
			
	REST - representational state transfer - архитектурный стиль, нет жестких правил, не нужен WSDL 
	
	JSON - javascript object notation, обьекты ключ:значение
	
		[ {"postalcode":"123"}, {"postalcode":"456"} ]
		
			Отличия

		1. Rest различные форматы - Json , Xml и пр. Soap - только XML
		2. Rest - только http/https. Soap - разл. протоколы
		3. Rest можно кешировать. Soap не помещается в кеш
		4. Rest - архитект. стиль. Soap - протокол где много правил
		
		простота против стандарта. Rest - скорость, расширяемость и множество форматов. Soap - безопасность, более ресурсоемкий, медленнее, дольше разработка
	
	SOAP - simple object access protocol

	XML - extensible markup language
	
		1. только 1 корневой элемент
		2. все элементы с закрывающими тегами
		3. теги регистрозависимые
		4. теги не должны пересекаться
		5. все значения атрибутов в кавычках
		6. <, > и & нельзя использовать в текстовых блоках
		7. Обьявление XML - всегда 1я строка

	XSD - XML Schema Definition
	
	WSDL - web services description language
		
			28 Методы
			
	GET - адресная строка
		- нет тела запроса, не можем загрузить инфу
		- ограничен длиной адресной строки
		- кешируется на стороне клиента
		- можно сохранить в закладку браузера
		
 	Options - узнать какие методы запросов поддерживаются сервером, в ответе дает Allow: Get etc / curl -X OPTIONS http://example.org -i
	
	HEAD - как и Get но без тела ответа
		
		
			29 Логи
			
		Логи - приложения, сервера (Access logs, Error logs), системные
	
		Уровни  - off (не пишем логи)
				- fatal (блокирующая ошибка)
				- error (ошибка некритичная)
				- warning (несерьезные ошибки)
				- info логи
				- debug (отладка, все предыдущие уровни)
				- trace
				- All
		
			30
			
		API - local
			- remote (soap, rest)
	
	Способы вызова API  - системой (по крону)
						- человеком (руками)
						- GUI - API
						- другой системой

			40 Базы данных, SQL - structure query language

	Типы БД     - иерархическая, в форме дерева
				- сетевая, в форме сети, отношение 1 ко многим, многие к 1 и пр.
				- реляционная (строки - записи, столбцы - поля)
				
					- Primary key - id
					- Foreign key
					
		Нормализация - проц приведения таблиц к норм. виду
	
	Требования 1ой норм.формы - 1 строка 1 запись, атомарность
	
	Требования 2й норм.формы - таблица должна быть в 1й норм.форме, все поля должны зависеть от первич ключа, а не от его части
	
	БД = объект + данные
	СУБД = субъект = программа - книга Куликова
	
	SHOW databases; 
	USE students;
	SHOW tables;
	DESC table; - показать записи и поля
	
	
w3schools.com - sql etc

	Мобилки - нативный, веб, гибридные
	
		Мобилки Тестируем на
	
	1. На прерывание 
		a. вызовы вход/исход
		b. всплыв. окна/push/notifications
		c. при разрядке/подзарядке
		d. свернуть/развернуть приложение

	2. Установки
		установка, удаление, переустановка, обновление
		
	3. Интернет - Wifi, 3g, 4g, 5g
				- качество соединения
				- потеря связи
				- изменение типа соединения

	4. Работа с функциями - GPS, фото/видео, размер экрана/разрешение, ориентация, акселерометр, работа с жестами, 
	
	5. Тесты производительности - скорость, отзывчивость
								- загрузка оперативки
								- зависимость от заряда батареи
								- запуск с внутр памяти/с флешки
								
		
							*******************************
				
		Mobile - 44 			
				
	developer.android.com - Android studio
	developer.apple.com
	mixpanel.com
	gs.statcounter.com	
	appbrain.com			
	browserstack.com
	genymotion.com - эмулятор 

		Типы моб приложений
		
	1. нативные - скачиваем с магазинов
	2. гибридные - элементы нативных и веб приложений
	3. веб - m.vk.com - адаптирована верстка для мобилок